
#ifdef GET_DIAG_ARRAYS
static const short DiagSubGroup0[] = { 49, -1 };
static const short DiagArray1[] = { diag::warn_pragma_message, -1 };
static const short DiagArray2[] = { diag::pp_hash_warning, -1 };
static const short DiagArray3[] = { diag::warn_explicit_instantiation_must_be_global_0x, diag::warn_explicit_instantiation_out_of_scope_0x, -1 };
static const short DiagArray6[] = { diag::ext_typecheck_addrof_class_temporary, -1 };
static const short DiagSubGroup8[] = { 97, 117, -1 };
static const short DiagArray9[] = { diag::ext_nested_name_member_ref_lookup_ambiguous, -1 };
static const short DiagArray10[] = { diag::warn_array_index_exceeds_bounds, diag::warn_array_index_precedes_bounds, -1 };
static const short DiagSubGroup11[] = { 67, 34, -1 };
static const short DiagArray15[] = { diag::ext_rvalue_to_reference_access_ctor, diag::ext_rvalue_to_reference_temp_copy_no_viable, -1 };
static const short DiagArray16[] = { diag::warn_impcast_bool_to_null_pointer, -1 };
static const short DiagArray17[] = { diag::pp_redef_builtin_macro, -1 };
static const short DiagArray18[] = { diag::ext_empty_struct_union, -1 };
static const short DiagArray19[] = { diag::ext_hexconstant_cplusplus, -1 };
static const short DiagArray20[] = { diag::warn_explicit_instantiation_unqualified_wrong_namespace_0x, -1 };
static const short DiagSubGroup20[] = { 19, -1 };
static const short DiagArray21[] = { diag::ext_alias_declaration, diag::ext_array_size_conversion, diag::ext_explicit_instantiation_after_specialization, diag::ext_generalized_initializer_lists, diag::ext_inline_namespace, diag::ext_override_control_keyword, diag::ext_ref_qualifier, diag::ext_rvalue_reference, diag::ext_template_outside_of_template, diag::ext_template_parameter_default_in_function_template, diag::ext_template_spec_decl_out_of_scope, diag::ext_template_spec_decl_out_of_scope_global, diag::ext_typename_outside_of_template, diag::ext_variadic_templates, diag::warn_deleted_function_accepted_as_extension, diag::warn_explicit_conversion_functions, -1 };
static const short DiagSubGroup21[] = { 22, -1 };
static const short DiagArray22[] = { diag::ext_in_class_initializer_float_type, -1 };
static const short DiagArray23[] = { diag::warn_cast_align, -1 };
static const short DiagArray26[] = { diag::warn_subscript_is_char, -1 };
static const short DiagArray27[] = { diag::escaped_newline_block_comment_end, diag::ext_bcpl_comment, diag::ext_multi_line_bcpl_comment, diag::warn_nested_block_comment, -1 };
static const short DiagSubGroup28[] = { 27, -1 };
static const short DiagArray29[] = { diag::warn_maybe_uninit_var, diag::warn_maybe_uninit_var_captured_by_block, -1 };
static const short DiagArray30[] = { diag::warn_impcast_bitfield_precision_constant, diag::warn_impcast_integer_precision_constant, -1 };
static const short DiagArray31[] = { diag::warn_logical_instead_of_bitwise, -1 };
static const short DiagArray32[] = { diag::warn_impcast_complex_scalar, diag::warn_impcast_different_enum_types, diag::warn_impcast_float_integer, diag::warn_impcast_float_precision, diag::warn_impcast_integer_precision, diag::warn_impcast_vector_scalar, diag::warn_template_arg_negative, diag::warn_template_arg_too_large, -1 };
static const short DiagSubGroup32[] = { 133, 30, 81, 135, 16, -1 };
static const short DiagArray34[] = { diag::warn_default_atomic_custom_getter_setter, -1 };
static const short DiagArray35[] = { diag::ext_mixed_decls_code, -1 };
static const short DiagArray36[] = { diag::warn_access_decl_deprecated, diag::warn_drv_treating_input_as_cxx, diag::warn_increment_bool, diag::warn_vector_long_decl_spec_combination, -1 };
static const short DiagSubGroup36[] = { 37, -1 };
static const short DiagArray37[] = { diag::warn_deprecated, diag::warn_deprecated_fwdclass_message, diag::warn_deprecated_message, -1 };
static const short DiagArray38[] = { diag::warn_deprecated_def, -1 };
static const short DiagArray39[] = { diag::warn_deprecated_string_literal_conversion, -1 };
static const short DiagArray43[] = { diag::warn_method_param_declaration, -1 };
static const short DiagArray45[] = { diag::warn_empty_if_body, -1 };
static const short DiagSubGroup46[] = { 50, -1 };
static const short DiagArray47[] = { diag::warn_comparison_of_mixed_enum_types, -1 };
static const short DiagArray48[] = { diag::warn_exit_time_destructor, -1 };
static const short DiagSubGroup49[] = { 92, 65, 73, 128, 134, 178, -1 };
static const short DiagArray50[] = { diag::ext_pp_extra_tokens_at_eol, -1 };
static const short DiagArray51[] = { diag::warn_floatingpoint_eq, -1 };
static const short DiagArray52[] = { diag::warn_format_invalid_conversion, diag::warn_format_invalid_positional_specifier, diag::warn_format_mix_positional_nonpositional_args, diag::warn_format_nonsensical_length, diag::warn_format_string_is_wide_literal, diag::warn_format_zero_positional_specifier, diag::warn_missing_format_string, diag::warn_printf_asterisk_wrong_type, diag::warn_printf_conversion_argument_type_mismatch, diag::warn_printf_format_string_contains_null_char, diag::warn_printf_ignored_flag, diag::warn_printf_incomplete_specifier, diag::warn_printf_insufficient_data_args, diag::warn_printf_nonsensical_flag, diag::warn_printf_nonsensical_optional_amount, diag::warn_printf_positional_arg_exceeds_data_args, diag::warn_scanf_nonzero_width, diag::warn_scanf_scanlist_incomplete, -1 };
static const short DiagSubGroup52[] = { 53, 57, 106, 55, -1 };
static const short DiagArray53[] = { diag::warn_printf_data_arg_not_used, -1 };
static const short DiagArray54[] = { diag::warn_format_nonliteral, -1 };
static const short DiagSubGroup54[] = { 55, -1 };
static const short DiagArray55[] = { diag::warn_format_nonliteral_noargs, diag::warn_printf_write_back, -1 };
static const short DiagSubGroup56[] = { 52, -1 };
static const short DiagArray57[] = { diag::warn_empty_format_string, -1 };
static const short DiagSubGroup58[] = { 54, 55, 56, -1 };
static const short DiagArray59[] = { diag::ext_four_char_character_literal, -1 };
static const short DiagArray60[] = { diag::warn_global_constructor, diag::warn_global_destructor, -1 };
static const short DiagArray61[] = { diag::ext_anonymous_struct, diag::ext_anonymous_union, diag::ext_flexible_array_empty_aggregate_gnu, diag::ext_flexible_array_init, diag::ext_flexible_array_union_gnu, diag::ext_forward_ref_enum_def, diag::ext_gnu_address_of_label, diag::ext_gnu_case_range, diag::ext_gnu_conditional_expr, diag::ext_gnu_empty_initializer, diag::ext_gnu_indirect_goto, diag::ext_gnu_local_label, diag::ext_gnu_statement_expr, diag::ext_qualified_function_type_template_arg, diag::ext_typecheck_expression_not_constant_but_accepted, diag::ext_variable_sized_type_in_struct, -1 };
static const short DiagSubGroup61[] = { 62, 184, -1 };
static const short DiagArray62[] = { diag::ext_gnu_array_range, diag::ext_gnu_missing_equal_designator, diag::ext_gnu_old_style_field_designator, -1 };
static const short DiagArray63[] = { diag::warn_using_directive_in_header, -1 };
static const short DiagArray64[] = { diag::warn_condition_is_idiomatic_assignment, -1 };
static const short DiagArray65[] = { diag::warn_qual_return_type, -1 };
static const short DiagSubGroup66[] = { 68, 69, -1 };
static const short DiagArray67[] = { diag::warn_auto_implicit_atomic_property, diag::warn_implicit_atomic_property, -1 };
static const short DiagArray68[] = { diag::ext_implicit_function_decl, diag::warn_implicit_function_decl, -1 };
static const short DiagArray69[] = { diag::ext_missing_type_specifier, -1 };
static const short DiagArray71[] = { diag::warn_incomplete_impl, -1 };
static const short DiagArray73[] = { diag::warn_initializer_overrides, diag::warn_subobject_initializer_overrides, -1 };
static const short DiagArray76[] = { diag::warn_falloff_noreturn_function, diag::warn_noreturn_function_has_return_expr, -1 };
static const short DiagArray77[] = { diag::warn_offsetof_non_pod_type, -1 };
static const short DiagArray79[] = { diag::err_pp_bad_paste_ms, -1 };
static const short DiagArray80[] = { diag::warn_parameter_size, diag::warn_return_value_size, -1 };
static const short DiagArray81[] = { diag::warn_impcast_literal_float_to_integer, -1 };
static const short DiagArray82[] = { diag::warn_float_overflow, diag::warn_float_underflow, -1 };
static const short DiagArray83[] = { diag::ext_template_arg_local_type, -1 };
static const short DiagArray84[] = { diag::warn_logical_and_in_logical_or, -1 };
static const short DiagArray85[] = { diag::ext_longlong, -1 };
static const short DiagArray87[] = { diag::warn_non_contravariant_param_types, diag::warn_non_covariant_ret_types, -1 };
static const short DiagArray88[] = { diag::ext_anonymous_record_with_type, diag::ext_enumerator_too_large, diag::ext_flexible_array_empty_aggregate_ms, diag::ext_flexible_array_union_ms, diag::ext_ms_anonymous_struct, diag::ext_ms_enum_fixed_underlying_type, diag::ext_ms_explicit_constructor_call, diag::ext_ms_forward_ref_enum, -1 };
static const short DiagArray89[] = { diag::warn_struct_class_tag_mismatch, -1 };
static const short DiagArray90[] = { diag::warn_missing_braces, -1 };
static const short DiagArray91[] = { diag::ext_no_declarators, diag::ext_typedef_without_a_name, -1 };
static const short DiagArray92[] = { diag::warn_missing_field_initializers, -1 };
static const short DiagArray95[] = { diag::warn_suggest_noreturn_block, diag::warn_suggest_noreturn_function, -1 };
static const short DiagArray96[] = { diag::warn_missing_prototype, -1 };
static const short DiagSubGroup97[] = { 26, 27, 52, 66, 89, 90, 98, 124, 125, 127, 152, 157, 163, 165, 171, 183, 185, 114, -1 };
static const short DiagArray98[] = { diag::ext_multichar_character_literal, -1 };
static const short DiagSubGroup101[] = { 134, 32, 82, -1 };
static const short DiagArray102[] = { diag::warn_non_pod_memset, -1 };
static const short DiagArray103[] = { diag::warn_cannot_pass_non_pod_arg_to_vararg, -1 };
static const short DiagArray104[] = { diag::warn_non_virtual_dtor, -1 };
static const short DiagArray105[] = { diag::warn_synthesized_ivar_access, -1 };
static const short DiagArray106[] = { diag::warn_null_arg, -1 };
static const short DiagArray108[] = { diag::warn_indirection_through_null, -1 };
static const short DiagArray111[] = { diag::ext_out_of_line_declaration, -1 };
static const short DiagArray113[] = { diag::ext_string_too_long, -1 };
static const short DiagArray114[] = { diag::warn_overloaded_virtual, -1 };
static const short DiagArray115[] = { diag::warn_unnecessary_packed, -1 };
static const short DiagArray116[] = { diag::warn_padded_struct_anon_field, diag::warn_padded_struct_field, diag::warn_padded_struct_size, -1 };
static const short DiagArray117[] = { diag::warn_condition_is_assignment, diag::warn_equality_with_extra_parens, diag::warn_precedence_bitwise_rel, -1 };
static const short DiagSubGroup117[] = { 84, -1 };
static const short DiagArray118[] = { diag::ext_gnu_ptr_func_arith, diag::ext_gnu_void_ptr, diag::ext_sizeof_function_type, diag::ext_sizeof_void_type, -1 };
static const short DiagArray119[] = { diag::ext_typecheck_convert_incompatible_pointer_sign, -1 };
static const short DiagArray121[] = { diag::warn_unimplemented_protocol_method, -1 };
static const short DiagArray122[] = { diag::warn_objc_property_attr_mutually_exclusive, -1 };
static const short DiagArray124[] = { diag::warn_initializer_out_of_order, -1 };
static const short DiagArray125[] = { diag::ext_return_has_expr, diag::ext_return_missing_expr, diag::warn_falloff_nonvoid_function, diag::warn_maybe_falloff_nonvoid_function, diag::warn_return_missing_expr, -1 };
static const short DiagArray126[] = { diag::warn_unimplemented_selector, -1 };
static const short DiagArray127[] = { diag::warn_self_assignment, -1 };
static const short DiagArray128[] = { diag::warn_semicolon_before_method_body, -1 };
static const short DiagArray130[] = { diag::warn_decl_shadow, -1 };
static const short DiagArray131[] = { diag::warn_shift_result_gt_typewidth, -1 };
static const short DiagArray132[] = { diag::warn_shift_result_overrides_sign_bit, -1 };
static const short DiagArray133[] = { diag::warn_impcast_integer_64_32, -1 };
static const short DiagArray134[] = { diag::warn_mixed_sign_comparison, diag::warn_mixed_sign_conditional, -1 };
static const short DiagArray135[] = { diag::warn_impcast_integer_sign, diag::warn_impcast_integer_sign_conditional, -1 };
static const short DiagArray150[] = { diag::warn_strict_multiple_method_decl, -1 };
static const short DiagArray151[] = { diag::ext_typecheck_base_super, -1 };
static const short DiagArray152[] = { diag::warn_case_value_overflow, -1 };
static const short DiagSubGroup152[] = { 154, -1 };
static const short DiagArray154[] = { diag::warn_missing_case1, diag::warn_missing_case2, diag::warn_missing_case3, diag::warn_missing_cases, diag::warn_not_in_enum, -1 };
static const short DiagArray156[] = { diag::warn_comparison_always, diag::warn_lunsigned_always_true_comparison, diag::warn_runsigned_always_true_comparison, -1 };
static const short DiagArray157[] = { diag::trigraph_converted, diag::trigraph_ends_block_comment, diag::trigraph_ignored, diag::trigraph_ignored_block_comment, -1 };
static const short DiagArray159[] = { diag::warn_redefinition_of_typedef, -1 };
static const short DiagArray160[] = { diag::warn_undeclared_selector, -1 };
static const short DiagArray161[] = { diag::warn_pp_undef_identifier, -1 };
static const short DiagArray163[] = { diag::warn_field_is_uninit, diag::warn_uninit_self_reference_in_init, diag::warn_uninit_var, diag::warn_uninit_var_captured_by_block, -1 };
static const short DiagArray164[] = { diag::warn_unknown_attribute_ignored, -1 };
static const short DiagArray165[] = { diag::ext_on_off_switch_syntax, diag::ext_pragma_syntax_eod, diag::ext_stdc_pragma_ignored, diag::warn_pragma_diagnostic_cannot_pop, diag::warn_pragma_diagnostic_invalid, diag::warn_pragma_diagnostic_invalid_option, diag::warn_pragma_diagnostic_invalid_token, diag::warn_pragma_diagnostic_unknown_warning, diag::warn_pragma_ignored, diag::warn_stdc_fenv_access_not_supported, -1 };
static const short DiagArray166[] = { diag::warn_unknown_warning_option, diag::warn_unknown_warning_specifier, -1 };
static const short DiagArray167[] = { diag::ext_template_arg_unnamed_type, -1 };
static const short DiagArray168[] = { diag::warn_unneeded_internal_decl, -1 };
static const short DiagArray169[] = { diag::warn_unneeded_member_function, -1 };
static const short DiagArray170[] = { diag::warn_unreachable, -1 };
static const short DiagSubGroup171[] = { 172, 174, 175, 179, 180, -1 };
static const short DiagArray173[] = { diag::warn_unused_exception_param, -1 };
static const short DiagArray174[] = { diag::warn_unused_function, -1 };
static const short DiagSubGroup174[] = { 168, -1 };
static const short DiagArray175[] = { diag::warn_unused_label, -1 };
static const short DiagArray176[] = { diag::pp_macro_not_used, -1 };
static const short DiagArray177[] = { diag::warn_unused_member_function, -1 };
static const short DiagSubGroup177[] = { 169, -1 };
static const short DiagArray178[] = { diag::warn_unused_parameter, -1 };
static const short DiagArray179[] = { diag::warn_unused_call, diag::warn_unused_expr, diag::warn_unused_property_expr, diag::warn_unused_voidptr, -1 };
static const short DiagArray180[] = { diag::warn_unused_variable, -1 };
static const short DiagArray181[] = { diag::warn_used_but_marked_unused, -1 };
static const short DiagArray182[] = { diag::ext_named_variadic_macro, diag::ext_variadic_macro, -1 };
static const short DiagArray183[] = { diag::warn_incompatible_vectors, -1 };
static const short DiagArray184[] = { diag::ext_vla, -1 };
static const short DiagArray186[] = { diag::warn_weak_vtable, -1 };
static const short DiagSubGroup187[] = { 39, -1 };
#endif // GET_DIAG_ARRAYS


#ifdef GET_DIAG_TABLE
  { "",                              0, DiagSubGroup0 },
  { "#pragma messages",              DiagArray1, 0 },
  { "#warnings",                     DiagArray2, 0 },
  { "-Wc++0x-compat",                DiagArray3, 0 },
  { "abi",                           0, 0 },
  { "address",                       0, 0 },
  { "address-of-temporary",          DiagArray6, 0 },
  { "aggregate-return",              0, 0 },
  { "all",                           0, DiagSubGroup8 },
  { "ambiguous-member-template",     DiagArray9, 0 },
  { "array-bounds",                  DiagArray10, 0 },
  { "atomic-properties",             0, DiagSubGroup11 },
  { "attributes",                    0, 0 },
  { "availability",                  0, 0 },
  { "bad-function-cast",             0, 0 },
  { "bind-to-temporary-copy",        DiagArray15, 0 },
  { "bool-conversions",              DiagArray16, 0 },
  { "builtin-macro-redefined",       DiagArray17, 0 },
  { "c++-compat",                    DiagArray18, 0 },
  { "c++-hex-floats",                DiagArray19, 0 },
  { "c++0x-compat",                  DiagArray20, DiagSubGroup20 },
  { "c++0x-extensions",              DiagArray21, DiagSubGroup21 },
  { "c++0x-static-nonintegral-init", DiagArray22, 0 },
  { "cast-align",                    DiagArray23, 0 },
  { "cast-qual",                     0, 0 },
  { "char-align",                    0, 0 },
  { "char-subscripts",               DiagArray26, 0 },
  { "comment",                       DiagArray27, 0 },
  { "comments",                      0, DiagSubGroup28 },
  { "conditional-uninitialized",     DiagArray29, 0 },
  { "constant-conversion",           DiagArray30, 0 },
  { "constant-logical-operand",      DiagArray31, 0 },
  { "conversion",                    DiagArray32, DiagSubGroup32 },
  { "ctor-dtor-privacy",             0, 0 },
  { "custom-atomic-properties",      DiagArray34, 0 },
  { "declaration-after-statement",   DiagArray35, 0 },
  { "deprecated",                    DiagArray36, DiagSubGroup36 },
  { "deprecated-declarations",       DiagArray37, 0 },
  { "deprecated-implementations",    DiagArray38, 0 },
  { "deprecated-writable-strings",   DiagArray39, 0 },
  { "disabled-optimization",         0, 0 },
  { "discard-qual",                  0, 0 },
  { "div-by-zero",                   0, 0 },
  { "duplicate-method-arg",          DiagArray43, 0 },
  { "effc++",                        0, 0 },
  { "empty-body",                    DiagArray45, 0 },
  { "endif-labels",                  0, DiagSubGroup46 },
  { "enum-compare",                  DiagArray47, 0 },
  { "exit-time-destructors",         DiagArray48, 0 },
  { "extra",                         0, DiagSubGroup49 },
  { "extra-tokens",                  DiagArray50, 0 },
  { "float-equal",                   DiagArray51, 0 },
  { "format",                        DiagArray52, DiagSubGroup52 },
  { "format-extra-args",             DiagArray53, 0 },
  { "format-nonliteral",             DiagArray54, DiagSubGroup54 },
  { "format-security",               DiagArray55, 0 },
  { "format-y2k",                    0, DiagSubGroup56 },
  { "format-zero-length",            DiagArray57, 0 },
  { "format=2",                      0, DiagSubGroup58 },
  { "four-char-constants",           DiagArray59, 0 },
  { "global-constructors",           DiagArray60, 0 },
  { "gnu",                           DiagArray61, DiagSubGroup61 },
  { "gnu-designator",                DiagArray62, 0 },
  { "header-hygiene",                DiagArray63, 0 },
  { "idiomatic-parentheses",         DiagArray64, 0 },
  { "ignored-qualifiers",            DiagArray65, 0 },
  { "implicit",                      0, DiagSubGroup66 },
  { "implicit-atomic-properties",    DiagArray67, 0 },
  { "implicit-function-declaration", DiagArray68, 0 },
  { "implicit-int",                  DiagArray69, 0 },
  { "import",                        0, 0 },
  { "incomplete-implementation",     DiagArray71, 0 },
  { "init-self",                     0, 0 },
  { "initializer-overrides",         DiagArray73, 0 },
  { "inline",                        0, 0 },
  { "int-to-pointer-cast",           0, 0 },
  { "invalid-noreturn",              DiagArray76, 0 },
  { "invalid-offsetof",              DiagArray77, 0 },
  { "invalid-pch",                   0, 0 },
  { "invalid-token-paste",           DiagArray79, 0 },
  { "large-by-value-copy",           DiagArray80, 0 },
  { "literal-conversion",            DiagArray81, 0 },
  { "literal-range",                 DiagArray82, 0 },
  { "local-type-template-args",      DiagArray83, 0 },
  { "logical-op-parentheses",        DiagArray84, 0 },
  { "long-long",                     DiagArray85, 0 },
  { "main",                          0, 0 },
  { "method-signatures",             DiagArray87, 0 },
  { "microsoft",                     DiagArray88, 0 },
  { "mismatched-tags",               DiagArray89, 0 },
  { "missing-braces",                DiagArray90, 0 },
  { "missing-declarations",          DiagArray91, 0 },
  { "missing-field-initializers",    DiagArray92, 0 },
  { "missing-format-attribute",      0, 0 },
  { "missing-include-dirs",          0, 0 },
  { "missing-noreturn",              DiagArray95, 0 },
  { "missing-prototypes",            DiagArray96, 0 },
  { "most",                          0, DiagSubGroup97 },
  { "multichar",                     DiagArray98, 0 },
  { "nested-externs",                0, 0 },
  { "newline-eof",                   0, 0 },
  { "non-gcc",                       0, DiagSubGroup101 },
  { "non-pod-memset",                DiagArray102, 0 },
  { "non-pod-varargs",               DiagArray103, 0 },
  { "non-virtual-dtor",              DiagArray104, 0 },
  { "nonfragile-abi2",               DiagArray105, 0 },
  { "nonnull",                       DiagArray106, 0 },
  { "nonportable-cfstrings",         0, 0 },
  { "null-dereference",              DiagArray108, 0 },
  { "old-style-cast",                0, 0 },
  { "old-style-definition",          0, 0 },
  { "out-of-line-declaration",       DiagArray111, 0 },
  { "overflow",                      0, 0 },
  { "overlength-strings",            DiagArray113, 0 },
  { "overloaded-virtual",            DiagArray114, 0 },
  { "packed",                        DiagArray115, 0 },
  { "padded",                        DiagArray116, 0 },
  { "parentheses",                   DiagArray117, DiagSubGroup117 },
  { "pointer-arith",                 DiagArray118, 0 },
  { "pointer-sign",                  DiagArray119, 0 },
  { "pointer-to-int-cast",           0, 0 },
  { "protocol",                      DiagArray121, 0 },
  { "readonly-setter-attrs",         DiagArray122, 0 },
  { "redundant-decls",               0, 0 },
  { "reorder",                       DiagArray124, 0 },
  { "return-type",                   DiagArray125, 0 },
  { "selector",                      DiagArray126, 0 },
  { "self-assign",                   DiagArray127, 0 },
  { "semicolon-before-method-body",  DiagArray128, 0 },
  { "sequence-point",                0, 0 },
  { "shadow",                        DiagArray130, 0 },
  { "shift-overflow",                DiagArray131, 0 },
  { "shift-sign-overflow",           DiagArray132, 0 },
  { "shorten-64-to-32",              DiagArray133, 0 },
  { "sign-compare",                  DiagArray134, 0 },
  { "sign-conversion",               DiagArray135, 0 },
  { "sign-promo",                    0, 0 },
  { "stack-protector",               0, 0 },
  { "strict-aliasing",               0, 0 },
  { "strict-aliasing=0",             0, 0 },
  { "strict-aliasing=1",             0, 0 },
  { "strict-aliasing=2",             0, 0 },
  { "strict-overflow",               0, 0 },
  { "strict-overflow=0",             0, 0 },
  { "strict-overflow=1",             0, 0 },
  { "strict-overflow=2",             0, 0 },
  { "strict-overflow=3",             0, 0 },
  { "strict-overflow=4",             0, 0 },
  { "strict-overflow=5",             0, 0 },
  { "strict-prototypes",             0, 0 },
  { "strict-selector-match",         DiagArray150, 0 },
  { "super-class-method-mismatch",   DiagArray151, 0 },
  { "switch",                        DiagArray152, DiagSubGroup152 },
  { "switch-default",                0, 0 },
  { "switch-enum",                   DiagArray154, 0 },
  { "synth",                         0, 0 },
  { "tautological-compare",          DiagArray156, 0 },
  { "trigraphs",                     DiagArray157, 0 },
  { "type-limits",                   0, 0 },
  { "typedef-redefinition",          DiagArray159, 0 },
  { "undeclared-selector",           DiagArray160, 0 },
  { "undef",                         DiagArray161, 0 },
  { "undefined-internal",            0, 0 },
  { "uninitialized",                 DiagArray163, 0 },
  { "unknown-attributes",            DiagArray164, 0 },
  { "unknown-pragmas",               DiagArray165, 0 },
  { "unknown-warning-option",        DiagArray166, 0 },
  { "unnamed-type-template-args",    DiagArray167, 0 },
  { "unneeded-internal-declaration", DiagArray168, 0 },
  { "unneeded-member-function",      DiagArray169, 0 },
  { "unreachable-code",              DiagArray170, 0 },
  { "unused",                        0, DiagSubGroup171 },
  { "unused-argument",               0, 0 },
  { "unused-exception-parameter",    DiagArray173, 0 },
  { "unused-function",               DiagArray174, DiagSubGroup174 },
  { "unused-label",                  DiagArray175, 0 },
  { "unused-macros",                 DiagArray176, 0 },
  { "unused-member-function",        DiagArray177, DiagSubGroup177 },
  { "unused-parameter",              DiagArray178, 0 },
  { "unused-value",                  DiagArray179, 0 },
  { "unused-variable",               DiagArray180, 0 },
  { "used-but-marked-unused",        DiagArray181, 0 },
  { "variadic-macros",               DiagArray182, 0 },
  { "vector-conversions",            DiagArray183, 0 },
  { "vla",                           DiagArray184, 0 },
  { "volatile-register-var",         0, 0 },
  { "weak-vtables",                  DiagArray186, 0 },
  { "write-strings",                 0, DiagSubGroup187 },
#endif // GET_DIAG_TABLE


#ifdef GET_CATEGORY_TABLE
CATEGORY("")
CATEGORY("Parse Issue")
CATEGORY("Lexical or Preprocessor Issue")
CATEGORY("Semantic Issue")
CATEGORY("Inline Assembly Issue")
CATEGORY("#warning Directive")
CATEGORY("Deprecations")
CATEGORY("Format String Issue")
CATEGORY("Value Conversion Issue")
CATEGORY("#pragma message Directive")
CATEGORY("Unused Entity Issue")
#endif // GET_CATEGORY_TABLE

